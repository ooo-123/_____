import dash
import dash_bootstrap_components as dbc
from dash import html, dcc, dash_table, Input, Output, State, callback_context
import pandas as pd
import datetime
import numpy as np

# Initialize the Dash app with a dark theme
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.DARKLY])

# Define the columns for the trade table
columns = [
    'trade_id', 'datetime', 'close_datetime', 'trade_duration', 'action',
    'direction', 'size', 'entry_price', 'close_price', 'tp_level', 'sl_level',
    'risk_reward_ratio', '$_realized_pnl', 'cumulative_pnl', 'pips_gained',
    'closure_reason', 'TSL', 'comments', 'PNL_comment', 'partial_tp_comment',
    'partial_tp_datetime', 'partial_tp_close_price', 'Group_ID'
]

# Initialize an empty DataFrame to store trades
trade_history = pd.DataFrame(columns=columns)

# Function to format datetime
def format_datetime(dt):
    day = dt.day
    suffix = 'th' if 11 <= day <= 13 else {1:'st', 2:'nd', 3:'rd'}.get(day%10, 'th')
    return dt.strftime(f'%d{suffix} %b %Y %H:%M')

# App layout
app.layout = dbc.Container([
    html.H1('Trade Journaling Application', className='text-center mb-4'),

    # Market Price Input
    dbc.Row([
        dbc.Col([
            dbc.Label('Market Price', html_for='market-price-input'),
            dbc.Input(
                id='market-price-input',
                type='number',
                value=0.6890,
                step=0.0001,
                style={'width': '100%'},
            ),
        ], width=2),
    ], className='mb-4'),

    # New Trade Entry Form
    html.H2('Enter New Trade', className='mb-3'),
    dbc.Form([
        dbc.Row([
            dbc.Col([
                dbc.Label('Direction', html_for='direction-input'),
                dcc.Dropdown(
                    id='direction-input',
                    options=[{'label': 'Long', 'value': 'long'}, {'label': 'Short', 'value': 'short'}],
                    value='long',
                    clearable=False,
                    style={'width': '100%', 'color': 'black'}
                ),
            ], width=2),
            dbc.Col([
                dbc.Label('Size (in AUD)', html_for='size-input'),
                dbc.Input(
                    id='size-input',
                    type='number',
                    value=1000000,
                    step=100000,
                    style={'width': '100%'}
                ),
            ], width=2),
            dbc.Col([
                dbc.Label('Entry Price', html_for='entry-price-input'),
                dbc.Input(
                    id='entry-price-input',
                    type='number',
                    step=0.0001,
                    style={'width': '100%'}
                ),
            ], width=2),
            dbc.Col([
                dbc.Label('TP Level', html_for='tp-level-input'),
                dbc.Input(
                    id='tp-level-input',
                    type='number',
                    step=0.0001,
                    style={'width': '100%'}
                ),
            ], width=2),
            dbc.Col([
                dbc.Label('SL Level', html_for='sl-level-input'),
                dbc.Input(
                    id='sl-level-input',
                    type='number',
                    step=0.0001,
                    style={'width': '100%'}
                ),
            ], width=2),
            dbc.Col([
                dbc.Button('Add Trade', id='add-trade-button', n_clicks=0, color='primary', className='mt-4'),
            ], width=2),
        ], className='mb-4', align='center'),
    ]),

    # Trade Table
    dash_table.DataTable(
        id='trade-table',
        columns=[
            {'name': 'Trade ID', 'id': 'trade_id'},
            {'name': 'Datetime', 'id': 'datetime'},
            {'name': 'Action', 'id': 'action'},
            {'name': 'Direction', 'id': 'direction'},
            {'name': 'Size', 'id': 'size'},
            {'name': 'Entry Price', 'id': 'entry_price'},
            {'name': 'TP Level', 'id': 'tp_level'},
            {'name': 'SL Level', 'id': 'sl_level'},
            {'name': 'Realized PNL ($)', 'id': '$_realized_pnl'},
            {'name': 'Pips Gained', 'id': 'pips_gained'},
            {'name': 'Comments', 'id': 'comments'},
            {'name': 'Group ID', 'id': 'Group_ID'},
            {'name': '', 'id': 'modify', 'type': 'text', 'presentation': 'button'},
            {'name': '', 'id': 'close', 'type': 'text', 'presentation': 'button'},
            {'name': '', 'id': 'partial_close', 'type': 'text', 'presentation': 'button'},
        ],
        data=[],
        editable=False,
        row_deletable=False,
        sort_action='native',
        page_action='none',
        style_table={'height': '400px', 'overflowY': 'auto'},
        style_cell={'textAlign': 'left'},
        style_header={
            'backgroundColor': 'rgb(30, 30, 30)',
            'color': 'white',
            'fontWeight': 'bold'
        },
        style_data={
            'backgroundColor': 'rgb(50, 50, 50)',
            'color': 'white'
        },
        style_cell_conditional=[
            {'if': {'column_id': 'modify'},
             'width': '5%'},
            {'if': {'column_id': 'close'},
             'width': '5%'},
            {'if': {'column_id': 'partial_close'},
             'width': '10%'},
        ],
    ),

    # Modals for Modify, Close, Partial Close
    # [Modals remain the same as in the previous code]

    # Hidden div to store the trade ID being modified/closed
    html.Div(id='current-trade-id', style={'display': 'none'}),

    # Store component to hold trade data
    dcc.Store(id='trade-data', data=trade_history.to_dict('records')),

], fluid=True)

# [Modals definitions remain the same as before]

# Callback to update Entry Price, TP Level, and SL Level based on Market Price and Direction
# [Same as before]

# Callback to handle adding trades and updating trade closures
# [Same as before]

# Callback to update the trade table
@app.callback(
    Output('trade-table', 'data'),
    [Input('trade-data', 'data')]
)
def update_table(data):
    # Add action buttons to each row
    for row in data:
        row['modify'] = 'Modify'
        row['close'] = 'Close'
        row['partial_close'] = 'Partial Close'
    # Sort trades in reverse chronological order (most recent at top)
    sorted_data = sorted(data, key=lambda x: x['trade_id'], reverse=True)
    return sorted_data

# Callbacks to handle opening modals
@app.callback(
    [
        Output("modify-modal", "is_open"),
        Output("close-modal", "is_open"),
        Output("partial-modal", "is_open"),
        Output("current-trade-id", "children"),
        Output("modify-size-input", "value"),
        Output("modify-tp-level-input", "value"),
        Output("modify-sl-level-input", "value"),
        Output("modify-comments-input", "value"),
        Output("close-comments-input", "value"),
        Output("partial-size-input", "value"),
        Output("partial-comments-input", "value"),
    ],
    [
        Input('trade-table', 'active_cell'),
        Input("close-modify-modal", "n_clicks"),
        Input("close-close-modal", "n_clicks"),
        Input("close-partial-modal", "n_clicks"),
        Input("save-modify-button", "n_clicks"),
        Input("confirm-close-button", "n_clicks"),
        Input("confirm-partial-button", "n_clicks"),
    ],
    [
        State('trade-table', 'data'),
        State("modify-modal", "is_open"),
        State("close-modal", "is_open"),
        State("partial-modal", "is_open"),
    ],
)
def display_modals(active_cell, close_modify_n, close_close_n, close_partial_n,
                   save_modify_n, confirm_close_n, confirm_partial_n,
                   table_data, is_modify_open, is_close_open, is_partial_open):
    ctx = callback_context
    if not ctx.triggered:
        raise dash.exceptions.PreventUpdate

    triggered_id = ctx.triggered[0]['prop_id'].split('.')[0]

    if triggered_id == 'trade-table' and active_cell:
        row = active_cell['row']
        column = active_cell['column_id']
        trade_id = table_data[row]['trade_id']
        trade = table_data[row]
        if column == 'modify':
            # Open modify modal
            return (
                True, False, False, str(trade_id),
                trade['size'], trade['tp_level'], trade['sl_level'], trade.get('comments', ''),
                '', '', ''
            )
        elif column == 'close':
            # Open close modal
            return (False, True, False, str(trade_id), None, None, None, '', '', '', '')
        elif column == 'partial_close':
            # Open partial close modal
            default_partial_size = trade['size'] / 2
            return (False, False, True, str(trade_id), None, None, None, '', '', default_partial_size, '')
        else:
            # Clicked on some other cell
            return (is_modify_open, is_close_open, is_partial_open, '', None, None, None, '', '', None, '')
    elif triggered_id in ['close-modify-modal', 'save-modify-button',
                          'close-close-modal', 'confirm-close-button',
                          'close-partial-modal', 'confirm-partial-button']:
        return (False, False, False, '', None, None, None, '', '', None, '')
    else:
        return (is_modify_open, is_close_open, is_partial_open, '', None, None, None, '', '', None, '')

# The rest of the code remains the same

if __name__ == '__main__':
    app.run_server(debug=True)


========

import dash
import dash_bootstrap_components as dbc
from dash import html, dcc, dash_table, Input, Output, State, callback_context
import pandas as pd
import datetime
import numpy as np

# Initialize the Dash app with a dark theme
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.DARKLY])

# Define the columns for the trade table
columns = [
    'trade_id', 'datetime', 'close_datetime', 'trade_duration', 'action',
    'direction', 'size', 'entry_price', 'close_price', 'tp_level', 'sl_level',
    'risk_reward_ratio', '$_realized_pnl', 'cumulative_pnl', 'pips_gained',
    'closure_reason', 'TSL', 'comments', 'PNL_comment', 'partial_tp_comment',
    'partial_tp_datetime', 'partial_tp_close_price', 'Group_ID'
]

# Initialize an empty DataFrame to store trades
trade_history = pd.DataFrame(columns=columns)

# Function to format datetime
def format_datetime(dt):
    day = dt.day
    suffix = 'th' if 11 <= day <= 13 else {1:'st', 2:'nd', 3:'rd'}.get(day%10, 'th')
    return dt.strftime(f'%d{suffix} %b %Y %H:%M')

# App layout
app.layout = dbc.Container([
    html.H1('Trade Journaling Application', className='text-center mb-4'),

    # Market Price Input
    dbc.Row([
        dbc.Col([
            dbc.Label('Market Price', html_for='market-price-input'),
            dbc.Input(
                id='market-price-input',
                type='number',
                value=0.6890,
                step=0.0001,
                style={'width': '100%'},
            ),
        ], width=2),
    ], className='mb-4'),

    # New Trade Entry Form
    html.H2('Enter New Trade', className='mb-3'),
    dbc.Form([
        dbc.Row([
            dbc.Col([
                dbc.Label('Direction', html_for='direction-input'),
                dcc.Dropdown(
                    id='direction-input',
                    options=[{'label': 'Long', 'value': 'long'}, {'label': 'Short', 'value': 'short'}],
                    value='long',
                    clearable=False,
                    style={'width': '100%', 'color': 'black'}
                ),
            ], width=2),
            dbc.Col([
                dbc.Label('Size (in AUD)', html_for='size-input'),
                dbc.Input(
                    id='size-input',
                    type='number',
                    value=1000000,
                    step=100000,
                    style={'width': '100%'}
                ),
            ], width=2),
            dbc.Col([
                dbc.Label('Entry Price', html_for='entry-price-input'),
                dbc.Input(
                    id='entry-price-input',
                    type='number',
                    step=0.0001,
                    style={'width': '100%'}
                ),
            ], width=2),
            dbc.Col([
                dbc.Label('TP Level', html_for='tp-level-input'),
                dbc.Input(
                    id='tp-level-input',
                    type='number',
                    step=0.0001,
                    style={'width': '100%'}
                ),
            ], width=2),
            dbc.Col([
                dbc.Label('SL Level', html_for='sl-level-input'),
                dbc.Input(
                    id='sl-level-input',
                    type='number',
                    step=0.0001,
                    style={'width': '100%'}
                ),
            ], width=2),
            dbc.Col([
                dbc.Button('Add Trade', id='add-trade-button', n_clicks=0, color='primary', className='mt-4'),
            ], width=2),
        ], className='mb-4', align='center'),
    ]),

    # Trade Table
    dash_table.DataTable(
        id='trade-table',
        columns=[
            {'name': 'Trade ID', 'id': 'trade_id'},
            {'name': 'Datetime', 'id': 'datetime'},
            {'name': 'Action', 'id': 'action'},
            {'name': 'Direction', 'id': 'direction'},
            {'name': 'Size', 'id': 'size'},
            {'name': 'Entry Price', 'id': 'entry_price'},
            {'name': 'TP Level', 'id': 'tp_level'},
            {'name': 'SL Level', 'id': 'sl_level'},
            {'name': 'Realized PNL ($)', 'id': '$_realized_pnl'},
            {'name': 'Pips Gained', 'id': 'pips_gained'},
            {'name': 'Comments', 'id': 'comments'},
            {'name': 'Group ID', 'id': 'Group_ID'},
            {'name': 'Actions', 'id': 'actions', 'presentation': 'markdown'},
        ],
        data=[],
        editable=False,
        row_deletable=False,
        sort_action='native',
        page_action='none',
        style_table={'height': '400px', 'overflowY': 'auto'},
        style_cell={'textAlign': 'left'},
        style_header={
            'backgroundColor': 'rgb(30, 30, 30)',
            'color': 'white',
            'fontWeight': 'bold'
        },
        style_data={
            'backgroundColor': 'rgb(50, 50, 50)',
            'color': 'white'
        },
        markdown_options={'html': True},
    ),

    # Modals for Modify, Close, Partial Close
    dbc.Modal([
        dbc.ModalHeader(dbc.ModalTitle("Modify Trade")),
        dbc.ModalBody([
            dbc.Form([
                dbc.Row([
                    dbc.Col([
                        dbc.Label('Size (in AUD)', html_for='modify-size-input'),
                        dbc.Input(
                            id='modify-size-input',
                            type='number',
                            step=100000,
                            style={'width': '100%'}
                        ),
                    ], width=6),
                    dbc.Col([
                        dbc.Label('TP Level', html_for='modify-tp-level-input'),
                        dbc.Input(
                            id='modify-tp-level-input',
                            type='number',
                            step=0.0001,
                            style={'width': '100%'}
                        ),
                    ], width=6),
                ], className='mb-3'),
                dbc.Row([
                    dbc.Col([
                        dbc.Label('SL Level', html_for='modify-sl-level-input'),
                        dbc.Input(
                            id='modify-sl-level-input',
                            type='number',
                            step=0.0001,
                            style={'width': '100%'}
                        ),
                    ], width=6),
                    dbc.Col([
                        dbc.Label('Comments', html_for='modify-comments-input'),
                        dbc.Input(
                            id='modify-comments-input',
                            type='text',
                            style={'width': '100%'}
                        ),
                    ], width=6),
                ], className='mb-3'),
            ]),
        ]),
        dbc.ModalFooter([
            dbc.Button("Save Changes", id="save-modify-button", color="primary"),
            dbc.Button("Close", id="close-modify-modal", className="ms-auto", color="secondary"),
        ]),
    ], id="modify-modal", is_open=False, centered=True),

    dbc.Modal([
        dbc.ModalHeader(dbc.ModalTitle("Close Trade")),
        dbc.ModalBody([
            dbc.Form([
                dbc.Row([
                    dbc.Col([
                        dbc.Label('Closure Reason', html_for='close-reason-input'),
                        dcc.Dropdown(
                            id='close-reason-input',
                            options=[
                                {'label': 'TP Hit', 'value': 'TP hit'},
                                {'label': 'SL Hit', 'value': 'SL hit'},
                                {'label': 'Manual Close', 'value': 'manual close'},
                            ],
                            value='manual close',
                            clearable=False,
                            style={'width': '100%', 'color': 'black'}
                        ),
                    ], width=6),
                    dbc.Col([
                        dbc.Label('Comments', html_for='close-comments-input'),
                        dbc.Input(
                            id='close-comments-input',
                            type='text',
                            style={'width': '100%'}
                        ),
                    ], width=6),
                ], className='mb-3'),
            ]),
        ]),
        dbc.ModalFooter([
            dbc.Button("Confirm Close", id="confirm-close-button", color="danger"),
            dbc.Button("Cancel", id="close-close-modal", className="ms-auto", color="secondary"),
        ]),
    ], id="close-modal", is_open=False, centered=True),

    dbc.Modal([
        dbc.ModalHeader(dbc.ModalTitle("Partial Close Trade")),
        dbc.ModalBody([
            dbc.Form([
                dbc.Row([
                    dbc.Col([
                        dbc.Label('Partial Size (in AUD)', html_for='partial-size-input'),
                        dbc.Input(
                            id='partial-size-input',
                            type='number',
                            step=100000,
                            style={'width': '100%'}
                        ),
                        dbc.FormText("Default is 50% of remaining size."),
                    ], width=6),
                    dbc.Col([
                        dbc.Label('Comments', html_for='partial-comments-input'),
                        dbc.Input(
                            id='partial-comments-input',
                            type='text',
                            style={'width': '100%'}
                        ),
                    ], width=6),
                ], className='mb-3'),
            ]),
        ]),
        dbc.ModalFooter([
            dbc.Button("Confirm Partial Close", id="confirm-partial-button", color="warning"),
            dbc.Button("Cancel", id="close-partial-modal", className="ms-auto", color="secondary"),
        ]),
    ], id="partial-modal", is_open=False, centered=True),

    # Hidden div to store the trade ID being modified/closed
    html.Div(id='current-trade-id', style={'display': 'none'}),

    # Store component to hold trade data
    dcc.Store(id='trade-data', data=trade_history.to_dict('records')),

], fluid=True)

# Callback to update Entry Price, TP Level, and SL Level based on Market Price and Direction
@app.callback(
    [
        Output('entry-price-input', 'value'),
        Output('tp-level-input', 'value'),
        Output('sl-level-input', 'value')
    ],
    [
        Input('market-price-input', 'value'),
        Input('direction-input', 'value')
    ]
)
def update_entry_tp_sl(market_price, direction):
    if market_price is None or direction is None:
        raise dash.exceptions.PreventUpdate
    entry_price = market_price
    pip_value = 0.0001
    tp_pips = 30 * pip_value  # 30 pips
    sl_pips = 25 * pip_value  # 25 pips
    if direction == 'long':
        tp_level = entry_price + tp_pips
        sl_level = entry_price - sl_pips
    else:  # 'short'
        tp_level = entry_price - tp_pips
        sl_level = entry_price + sl_pips
    # Round to 5 decimal places
    entry_price = round(entry_price, 5)
    tp_level = round(tp_level, 5)
    sl_level = round(sl_level, 5)
    return entry_price, tp_level, sl_level

# Callback to handle adding trades and updating trade closures
@app.callback(
    Output('trade-data', 'data'),
    [
        Input('add-trade-button', 'n_clicks'),
        Input('save-modify-button', 'n_clicks'),
        Input('confirm-close-button', 'n_clicks'),
        Input('confirm-partial-button', 'n_clicks'),
        Input('market-price-input', 'value'),
    ],
    [
        State('trade-data', 'data'),
        State('direction-input', 'value'),
        State('size-input', 'value'),
        State('entry-price-input', 'value'),
        State('tp-level-input', 'value'),
        State('sl-level-input', 'value'),
        State('current-trade-id', 'children'),
        State('modify-size-input', 'value'),
        State('modify-tp-level-input', 'value'),
        State('modify-sl-level-input', 'value'),
        State('modify-comments-input', 'value'),
        State('close-reason-input', 'value'),
        State('close-comments-input', 'value'),
        State('partial-size-input', 'value'),
        State('partial-comments-input', 'value'),
    ]
)
def update_trade_data(
    add_n_clicks, save_modify_n_clicks, confirm_close_n_clicks, confirm_partial_n_clicks, market_price,
    trade_data, direction, size, entry_price, tp_level, sl_level, current_trade_id,
    modify_size, modify_tp_level, modify_sl_level, modify_comments,
    close_reason, close_comments,
    partial_size, partial_comments
):
    ctx = callback_context
    if not ctx.triggered:
        raise dash.exceptions.PreventUpdate
    else:
        triggered_id = ctx.triggered[0]['prop_id'].split('.')[0]

    if triggered_id == 'add-trade-button' and add_n_clicks > 0:
        # Add new trade
        if entry_price is None:
            entry_price = market_price
        trade_id = len(trade_data) + 1  # Simple way to assign trade IDs
        now = datetime.datetime.now()
        datetime_str = format_datetime(now)
        # Assign Group ID automatically
        if len(trade_data) > 0:
            last_group_id = trade_data[-1]['Group_ID']
            if trade_data[-1]['action'] == 'open':
                group_id = trade_data[-1]['Group_ID']  # Same group as last open trade
            else:
                group_id = last_group_id + 1  # Increment group ID
        else:
            group_id = 1  # Start with group ID 1
        new_trade = {
            'trade_id': trade_id,
            'datetime': datetime_str,
            'close_datetime': None,
            'trade_duration': None,
            'action': 'open',
            'direction': direction,
            'size': size,
            'entry_price': entry_price,
            'close_price': None,
            'tp_level': tp_level,
            'sl_level': sl_level,
            'risk_reward_ratio': None,
            '$_realized_pnl': None,
            'cumulative_pnl': None,
            'pips_gained': None,
            'closure_reason': None,
            'TSL': None,
            'comments': None,
            'PNL_comment': None,
            'partial_tp_comment': None,
            'partial_tp_datetime': None,
            'partial_tp_close_price': None,
            'Group_ID': group_id,
            'actions': ''
        }
        trade_data.append(new_trade)
        return trade_data
    elif triggered_id == 'save-modify-button' and save_modify_n_clicks > 0:
        # Modify trade
        for trade in trade_data:
            if trade['trade_id'] == int(current_trade_id):
                if modify_size is not None:
                    trade['size'] = modify_size
                if modify_tp_level is not None:
                    trade['tp_level'] = modify_tp_level
                if modify_sl_level is not None:
                    trade['sl_level'] = modify_sl_level
                if modify_comments is not None:
                    trade['comments'] = modify_comments
                break
        return trade_data
    elif triggered_id == 'confirm-close-button' and confirm_close_n_clicks > 0:
        # Close trade
        for trade in trade_data:
            if trade['trade_id'] == int(current_trade_id) and trade['action'] != 'closed':
                now = datetime.datetime.now()
                datetime_str = format_datetime(now)
                trade['close_datetime'] = datetime_str
                # Calculate trade duration
                trade_start = datetime.datetime.strptime(trade['datetime'], '%d%S %b %Y %H:%M')
                duration = now - trade_start
                trade['trade_duration'] = str(duration)
                trade['action'] = 'closed'
                trade['close_price'] = market_price
                trade['closure_reason'] = close_reason
                if close_comments is not None:
                    trade['comments'] = close_comments
                # Update PNL calculation
                position_sign = 1 if trade['direction'] == 'long' else -1
                realized_pnl = position_sign * (trade['close_price'] - trade['entry_price']) * (trade['size'] / 1_000_000) * 1000000  # Convert to dollars
                trade['$_realized_pnl'] = round(realized_pnl, 2)
                # Update cumulative_pnl
                total_realized_pnl = sum([t['$_realized_pnl'] for t in trade_data if t['$_realized_pnl'] is not None])
                trade['cumulative_pnl'] = round(total_realized_pnl, 2)
                # Update pips_gained
                trade['pips_gained'] = round((trade['close_price'] - trade['entry_price']) / 0.0001 * position_sign, 2)
                break
        return trade_data
    elif triggered_id == 'confirm-partial-button' and confirm_partial_n_clicks > 0:
        # Partial close trade
        for trade in trade_data:
            if trade['trade_id'] == int(current_trade_id) and trade['action'] != 'closed':
                if partial_size is None or partial_size > trade['size']:
                    partial_size = trade['size'] / 2  # Default to 50%
                partial_size = min(partial_size, trade['size'])
                # Calculate partial PNL
                position_sign = 1 if trade['direction'] == 'long' else -1
                partial_pnl = position_sign * (market_price - trade['entry_price']) * (partial_size / 1_000_000) * 1000000
                if trade['$_realized_pnl'] is None:
                    trade['$_realized_pnl'] = 0
                trade['$_realized_pnl'] += round(partial_pnl, 2)
                trade['size'] -= partial_size
                if partial_comments:
                    if trade['comments']:
                        trade['comments'] += ' | ' + partial_comments
                    else:
                        trade['comments'] = partial_comments
                # If size reaches zero, close the trade
                if trade['size'] <= 0:
                    trade['action'] = 'closed'
                    trade['close_datetime'] = format_datetime(datetime.datetime.now())
                break
        return trade_data
    elif triggered_id == 'market-price-input':
        # Update PNL for open trades based on new market price
        for trade in trade_data:
            if trade['action'] == 'open':
                # Update unrealized PNL
                position_sign = 1 if trade['direction'] == 'long' else -1
                unrealized_pnl = position_sign * (market_price - trade['entry_price']) * (trade['size'] / 1_000_000) * 1000000  # Convert to dollars
                trade['$_realized_pnl'] = round(unrealized_pnl, 2)
                trade['pips_gained'] = round((market_price - trade['entry_price']) / 0.0001 * position_sign, 2)
        return trade_data
    else:
        # No update
        return trade_data

# Callback to update the trade table
@app.callback(
    Output('trade-table', 'data'),
    [Input('trade-data', 'data')]
)
def update_table(data):
    # Add action buttons to each row
    for row in data:
        trade_id = row['trade_id']
        row['actions'] = (
            f"[Modify](javascript:void(0);) "
            f"[Close](javascript:void(0);) "
            f"[Partial Close](javascript:void(0);)"
        )
    # Sort trades in reverse chronological order (most recent at top)
    sorted_data = sorted(data, key=lambda x: x['trade_id'], reverse=True)
    return sorted_data

# Callbacks to handle opening modals
@app.callback(
    [
        Output("modify-modal", "is_open"),
        Output("close-modal", "is_open"),
        Output("partial-modal", "is_open"),
        Output("current-trade-id", "children"),
        Output("modify-size-input", "value"),
        Output("modify-tp-level-input", "value"),
        Output("modify-sl-level-input", "value"),
        Output("modify-comments-input", "value"),
        Output("close-comments-input", "value"),
        Output("partial-size-input", "value"),
        Output("partial-comments-input", "value"),
    ],
    [
        Input('trade-table', 'active_cell'),
        Input("close-modify-modal", "n_clicks"),
        Input("close-close-modal", "n_clicks"),
        Input("close-partial-modal", "n_clicks"),
        Input("save-modify-button", "n_clicks"),
        Input("confirm-close-button", "n_clicks"),
        Input("confirm-partial-button", "n_clicks"),
    ],
    [
        State('trade-table', 'data'),
        State("modify-modal", "is_open"),
        State("close-modal", "is_open"),
        State("partial-modal", "is_open"),
    ],
)
def display_modals(active_cell, close_modify_n, close_close_n, close_partial_n,
                   save_modify_n, confirm_close_n, confirm_partial_n,
                   table_data, is_modify_open, is_close_open, is_partial_open):
    ctx = callback_context
    if not ctx.triggered:
        raise dash.exceptions.PreventUpdate

    triggered_id = ctx.triggered[0]['prop_id'].split('.')[0]

    if triggered_id == 'trade-table' and active_cell:
        row = active_cell['row']
        column = active_cell['column_id']
        trade_id = table_data[row]['trade_id']
        if column == 'actions':
            # Determine which action was clicked based on the cell content
            clicked_action = active_cell.get('value', '')
            if 'Modify' in clicked_action:
                # Open modify modal
                trade = table_data[row]
                return (
                    True, False, False, str(trade_id),
                    trade['size'], trade['tp_level'], trade['sl_level'], trade.get('comments', ''),
                    '', '', ''
                )
            elif 'Close' in clicked_action:
                # Open close modal
                return (False, True, False, str(trade_id), '', '', '', '', '', '', '')
            elif 'Partial' in clicked_action:
                # Open partial close modal
                trade = table_data[row]
                default_partial_size = trade['size'] / 2
                return (False, False, True, str(trade_id), '', '', '', '', '', default_partial_size, '')
    elif triggered_id in ['close-modify-modal', 'save-modify-button']:
        return (False, False, False, '', '', '', '', '', '', '', '')
    elif triggered_id in ['close-close-modal', 'confirm-close-button']:
        return (False, False, False, '', '', '', '', '', '', '', '')
    elif triggered_id in ['close-partial-modal', 'confirm-partial-button']:
        return (False, False, False, '', '', '', '', '', '', '', '')
    else:
        return (is_modify_open, is_close_open, is_partial_open, '', '', '', '', '', '', '', '')

# Run the Dash app
if __name__ == '__main__':
    app.run_server(debug=True)
